---
namespace: sonarqube-postgresql

database:
  defines: runnable
  inherits: postgresql/base
  metadata:
    private: true
  services:
    postgres:
      container: postgres
      port: 5432
      protocol: tcp
  containers:
    postgres:
      image-tag: <- $postgres-image_tag default("12.2")
      paths:
        - <- `${monk-volume-path}/sonarqube/postgresql:/var/lib/postgresql/data`
  variables:
    db_username:
      env: POSTGRES_USER
      value: <- $database-user default("sonarqube")
      type: string
    postgres_password:
      env: POSTGRES_PASSWORD
      value: <- $database-password default("password")
      type: string
    db_name:
      env: POSTGRES_DB
      value: <- $database-name default("sonarqube")
      type: string

nginx:
  defines: runnable
  metadata:
    publisher: monk.io
    tags: Nginx Web Server, Reverse Proxy, Load Balancing, Content Delivery Network (CDN), HTTP Cache, SSL/TLS Encryption, IPv6 Support, Server-side Scripting, High Performance, Low Resource Usage, Open-Source Software, Scalability, Web Acceleration, Web Traffic Management, Dynamic Content Serving, Static Content Serving, High Availability, Security, Optimization, Web Application Firewall
    icon: https://assets.monk.io/icons/nginx-logo-FF65602A76-seeklogo.com.png
    version: 1.0
    website: https://www.nginx.com/
    source: https://github.com/nginx/nginx
    private: true
  services:
    nginx:
      container: nginx-reverse-proxy
      port: <- $listen-port
      protocol: tcp
      host-port: <- $listen-port
  connections:
    sonarqube:
      runnable: sonarqube-postgresql/sonarqube
      service: sonarqube
  files:
    server-def:
      contents: |
        server {
          listen 0.0.0.0:{{ v "listen-port" }};
          location / {
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
            proxy_pass http://{{ v "proxy-target-host" }}:9000;
          }
        }
      mode: 511
      path: /opt/bitnami/nginx/conf/server_blocks/reverse_proxy.conf
      container: nginx-reverse-proxy
  containers:
    nginx-reverse-proxy:
      image: docker.io/bitnami/nginx
      image-tag: <- $nginx-image-tag default("latest")
      cap-add:
        - CAP_NET_BIND_SERVICE
  depends:
    wait-for:
      runnables:
        - sonarqube-postgresql/sonarqube
      timeout: 30
  variables:
    proxy-target-host:
      value: <- connection-hostname("sonarqube")
      type: string
    listen-port:
      value: <- $nginx-listen-port default(80)
      type: int

sonarqube:
  defines: runnable
  metadata:
    name: Sonarqube
    shortname: Sonarqube
    description: |
      SonarQube is a powerful and comprehensive platform for managing code quality. It provides a suite of tools and features for performing static code analysis, continuous code inspection, and ensuring code security, maintainability, and reliability. With SonarQube, developers can easily detect and fix code issues such as bugs, code smells, and security vulnerabilities, improving the overall quality of their codebase.

      SonarQube provides a range of metrics and indicators for measuring code quality, including code coverage, technical debt, and maintainability. It also offers a Quality Gate feature which enables developers to define quality criteria that must be met before new code can be integrated into the main codebase, ensuring that only high-quality code is released into production.

      SonarQube seamlessly integrates with popular development tools such as Jenkins, GitLab, and GitHub, making it easy to incorporate code quality checks into existing workflows. It also provides automated testing and vulnerability detection features, further enhancing the reliability and security of the code.

      Overall, SonarQube is an essential tool for developers looking to improve the quality of their code, adopt best practices, and ensure that their code meets the highest standards of reliability and security.

      ---

      Notes:

      Default login/password: admin/admin

      ** Please change upon first login **
    tags: SonarQube, Code Quality, Static Code Analysis, Continuous Code Inspection, Code Security, Code Maintainability, Technical Debt, Code Coverage, Quality Gate, DevOps, Code Review, Software Development, Automated Testing, Vulnerability Detection, Best Practices
    website: https://www.sonarqube.org/
    source: https://github.com/SonarSource/sonarqube
    publisher: monk.io
    icon: https://www.sonarqube.org/logos/index/sonarqube-logo.png
    version: 1.0
    private: true
  services:
    sonarqube:
      container: sonarqube
      port: 9000
      protocol: tcp
  connections:
    postgres:
      runnable: sonarqube-postgresql/database
      service: postgres
  containers:
    sonarqube:
      image: sonarqube
      image-tag: <- $sonarqube-image-tag default("lts-community")
      paths:
        - <- `${monk-volume-path}/sonarqube/data:/opt/sonarqube/data`
        - <- `${monk-volume-path}/sonarqube/extensions:/opt/sonarqube/extensions`
        - <- `${monk-volume-path}/sonarqube/logs:/opt/sonarqube/logs`
  depends:
    wait-for:
      runnables:
        - sonarqube-postgresql/database
      timeout: 30
  variables:
    SONAR_JDBC_URL:
      env: SONAR_JDBC_URL
      type: string
      value: <- "jdbc:postgresql://" $db-host ":" connection-port("postgres") "/" $db-name concat-all
    db-user:
      env: SONAR_JDBC_USERNAME
      type: string
      value: <- $database-user default("sonarqube")
    db-password:
      env: SONAR_JDBC_PASSWORD
      type: string
      value: <- $database-password default("password")
    db-name:
      type: string
      value: <- $database-name default("sonarqube")
    db-host:
      type: string
      value: <- connection-hostname("postgres")
