---
namespace: sonarqube-postgresql

database:
  defines: runnable
  metadata:
    name: PostgreSQL
    website: https://www.postgresql.org
    source: https://github.com/postgres
    publisher: monk.io
    icon: https://www.postgresql.org/media/img/about/press/elephant.png
    tags: frameworks, object-relational, indexing, data types, query optimization, postgresql, security, open-source, mvcc, community
    description: |
      PostgreSQL is a powerful open-source object-relational database management system (DBMS) that provides robustness, reliability, and performance to meet the demanding needs of enterprise-level applications. It was first released in 1989 and has since become one of the most popular and widely used relational databases in the world.
      One of the key features of PostgreSQL is its flexibility, which allows it to be used in a wide range of applications, from small-scale projects to large, complex enterprise systems. It supports a wide range of data types, including arrays, hstore, and JSON, and provides advanced indexing and query optimization features to ensure fast and efficient data retrieval.
      PostgreSQL also has a strong reputation for data security and integrity, with support for advanced security features like row-level security, data masking, and encryption. It also supports multi-version concurrency control (MVCC), which allows multiple transactions to access and modify data concurrently without interfering with each other.
      In addition to its powerful features, PostgreSQL has a large and active community of developers and users who contribute to its development and provide support through forums, mailing lists, and other channels. It is available on multiple platforms, including Linux, Windows, and macOS, and can be used with a wide range of programming languages and frameworks, making it a versatile and reliable choice for database management in a wide range of applications.
    private: true
  services:
    postgres:
      container: postgres
      port: 5432
      protocol: tcp
  containers:
    postgres:
      image: postgres
      image-tag: <- $image_tag
      paths:
        - <- `${monk-volume-path}/postgresql:/var/lib/postgresql/data`
  variables:
    db_username:
      env: POSTGRES_USER
      value: <- $database-user default("sonarqube")
      type: string
    postgres_password:
      env: POSTGRES_PASSWORD
      value: <- $database-password default("password")
      type: string
    db_name:
      env: POSTGRES_DB
      value: <- $database-name default("sonarqube")
      type: string
    image_tag:
      type: string
      value: <- $postgres-image-tag default("12.2")      
      

nginx:
  defines: runnable
  metadata:
    publisher: monk.io
    tags: load balancing, dynamic content serving, security, reverse proxy, high performance, ssl/tls encryption, scalability, nginx web server, optimization, ipv6 support, web acceleration, web application firewall, content delivery network, high availability, low resource usage, static content serving, web traffic management, http cache
    icon: https://assets.monk.io/icons/nginx-logo-FF65602A76-seeklogo.com.png
    version: 1.0
    website: https://www.nginx.com/
    source: https://github.com/nginx/nginx
    private: true
  services:
    nginx:
      container: nginx-reverse-proxy
      port: <- $listen-port
      protocol: tcp
      host-port: <- $listen-port
  connections:
    sonarqube:
      runnable: sonarqube-postgresql/sonarqube
      service: sonarqube
  files:
    server-def:
      contents: |
        server {
          listen 0.0.0.0:{{ v "listen-port" }};
          location / {
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
            proxy_pass http://{{ v "proxy-target-host" }}:9000;
          }
        }
      mode: 511
      path: /opt/bitnami/nginx/conf/server_blocks/reverse_proxy.conf
      container: nginx-reverse-proxy
  containers:
    nginx-reverse-proxy:
      image: docker.io/bitnamilegacy/nginx
      image-tag: <- $nginx-image-tag default("latest")
      cap-add:
        - CAP_NET_BIND_SERVICE
  depends:
    wait-for:
      runnables:
        - sonarqube-postgresql/sonarqube
      timeout: 30
  variables:
    proxy-target-host:
      value: <- connection-hostname("sonarqube")
      type: string
    listen-port:
      value: <- $nginx-listen-port default(80)
      type: int

sonarqube:
  defines: runnable
  metadata:
    name: Sonarqube
    shortname: Sonarqube
    description: |
      SonarQube is a powerful and comprehensive platform for managing code quality. It provides a suite of tools and features for performing static code analysis, continuous code inspection, and ensuring code security, maintainability, and reliability. With SonarQube, developers can easily detect and fix code issues such as bugs, code smells, and security vulnerabilities, improving the overall quality of their codebase.

      SonarQube provides a range of metrics and indicators for measuring code quality, including code coverage, technical debt, and maintainability. It also offers a Quality Gate feature which enables developers to define quality criteria that must be met before new code can be integrated into the main codebase, ensuring that only high-quality code is released into production.

      SonarQube seamlessly integrates with popular development tools such as Jenkins, GitLab, and GitHub, making it easy to incorporate code quality checks into existing workflows. It also provides automated testing and vulnerability detection features, further enhancing the reliability and security of the code.

      Overall, SonarQube is an essential tool for developers looking to improve the quality of their code, adopt best practices, and ensure that their code meets the highest standards of reliability and security.

      ---

      Notes:

      Default login/password: admin/admin

      ** Please change upon first login **
    tags: code review, vulnerability detection, quality gate, automated testing, best practices, code security, technical debt, sonarqube, code quality, static code analysis, continuous code inspection, code maintainability, code coverage, devops
    website: https://www.sonarqube.org/
    source: https://github.com/SonarSource/sonarqube
    publisher: monk.io
    icon: https://www.sonarqube.org/logos/index/sonarqube-logo.png
    version: 1.0
    private: true
  services:
    sonarqube:
      container: sonarqube
      port: 9000
      protocol: tcp
  connections:
    postgres:
      runnable: sonarqube-postgresql/database
      service: postgres
  containers:
    sonarqube:
      image: sonarqube
      image-tag: <- $sonarqube-image-tag default("lts-community")
      paths:
        - <- `${monk-volume-path}/sonarqube/data:/opt/sonarqube/data`
        - <- `${monk-volume-path}/sonarqube/extensions:/opt/sonarqube/extensions`
        - <- `${monk-volume-path}/sonarqube/logs:/opt/sonarqube/logs`
  depends:
    wait-for:
      runnables:
        - sonarqube-postgresql/database
      timeout: 30
  variables:
    SONAR_JDBC_URL:
      env: SONAR_JDBC_URL
      type: string
      value: <- "jdbc:postgresql://" $db-host ":" connection-port("postgres") "/" $db-name concat-all
    db-user:
      env: SONAR_JDBC_USERNAME
      type: string
      value: <- $database-user default("sonarqube")
    db-password:
      env: SONAR_JDBC_PASSWORD
      type: string
      value: <- $database-password default("password")
    db-name:
      type: string
      value: <- $database-name default("sonarqube")
    db-host:
      type: string
      value: <- connection-hostname("postgres")
    SONAR_SEARCH_JAVAADDITIONALOPTS:
      env: SONAR_SEARCH_JAVAADDITIONALOPTS
      type: string
      value: "-Dnode.store.allow_mmap=false"      
